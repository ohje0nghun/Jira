* 브랜치 명명 규칙 제약

- 현재 feature/SR-${NUMBER} 형식으로 브랜치를 생성하지 않으면 제약을 두도록 설정
- Bitbucket Scripts Runner 기능에 Pre-Check 스크립트 기능을 활용


구성 내용

1. Sprint Runner Addon 기능이 정상적으로 설치되었는지 확인

2. Pre hooks을 클릭 후 create 버튼 입력

3. 적용할 대상 및 스크립트 작성

import com.atlassian.bitbucket.repository.Repository
import com.atlassian.bitbucket.hook.repository.RepositoryHookRequest
import com.atlassian.bitbucket.hook.repository.RepositoryHookResult
import com.atlassian.sal.api.component.ComponentLocator
import com.atlassian.bitbucket.repository.RefService
import com.atlassian.bitbucket.command.CommandFailedException

try {
    def refService = ComponentLocator.getComponent(RefService)
    def request = hookRequest as RepositoryHookRequest

    def newRefs = request.refChanges
    def repo = request.repository  // 변수 이름을 'repo'로 변경

    // 허용된 브랜치 패턴 정의
    def allowedPatterns = [
        "refs/heads/feature/.*", 
        "refs/heads/release/.*", 
        "refs/heads/hotfix/.*", 
        "refs/heads/bugfix/.*"
    ]

    for (refChange in newRefs) {
        def branchName = refChange.refId

        // 브랜치 이름이 허용된 패턴 중 하나와 일치하는지 확인
        def isValid = allowedPatterns.any { pattern ->
            branchName.matches(pattern)
        }

        if (!isValid) {
            // 규칙에 맞지 않는 브랜치명 처리
            return RepositoryHookResult.rejected(
                "브랜치 생성 제한",
                "브랜치 명명규칙에 따라 생성이 제한됩니다. 브랜치 생성 예시) feature/\${기능명}"
            )
        }
    }

    // 정상적으로 브랜치가 생성된 경우
    return RepositoryHookResult.accepted()

} catch (CommandFailedException e) {
    // 명령어 실패로 인한 예외 처리
    log.warn("Bitbucket 명령 실패: ${e.message}", e)
    return RepositoryHookResult.rejected("Bitbucket 명령 실패", "오류가 발생했습니다: ${e.message}")

} catch (Exception e) {
    // 기타 예외 처리
    log.error("예상치 못한 오류 발생: ${e.message}", e)
    return RepositoryHookResult.rejected("오류 발생", "예상치 못한 오류가 발생했습니다: ${e.message}")
}



----
로그 필요 시

import com.atlassian.bitbucket.repository.Repository
import com.atlassian.bitbucket.hook.repository.RepositoryHookRequest
import com.atlassian.bitbucket.hook.repository.RepositoryHookResult
import com.atlassian.sal.api.component.ComponentLocator
import com.atlassian.bitbucket.repository.RefService

try {
    def refService = ComponentLocator.getComponent(RefService)
    def request = hookRequest as RepositoryHookRequest

    def newRefs = request.refChanges
    def repo = request.repository  // 변수 이름을 'repo'로 변경

    // 브랜치 생성 규칙
    def allowedPatterns = [
        "refs/heads/feature/.*", 
        "refs/heads/release/.*", 
        "refs/heads/hotfix/.*", 
        "refs/heads/bugfix/.*"
    ]

    for (refChange in newRefs) {
        def branchName = refChange.refId

        // 브랜치 이름이 허용된 패턴 중 하나와 일치하는지 확인
        def isValid = allowedPatterns.any { pattern ->
            branchName.matches(pattern)
        }

        if (!isValid) {
            // 규칙에 맞지 않는 브랜치명 처리
            return RepositoryHookResult.rejected(
                "브랜치 생성 제한",
                "브랜치 명명규칙에 따라 생성이 제한됩니다. 브랜치 생성 예시) feature/\${기능명}"
            )
        }
    }

    // 정상적으로 브랜치 생성된 경우
    return RepositoryHookResult.accepted()

} catch (Exception e) {
    // 예외 발생 시 에러 메시지를 기록
    log.error("Pre Hook Error: ${e.message}", e)
    return RepositoryHookResult.rejected("에러 발생", "오류가 발생했습니다: ${e.message}")
}







4. 적용 후 정상적으로 적용되는지 확인





